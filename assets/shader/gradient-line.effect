// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        angle: { value: 0.0, editor: { range: [0.0, 360.0, 1.0], slide: true, tooltip: '角度' } }
        color1: { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color, tooltip: '颜色1'  } }
        color2: { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color, tooltip: '颜色2'  } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  uniform Params {
      vec4 color1;
      vec4 color2;
      float angle;
  };

  in vec2 uv0;
  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  // 旋转uv坐标
  vec2 rotate(vec2 uv, float angle) {
      float s = sin(radians(angle));
      float c = cos(radians(angle));
      mat2 rotationMatrix = mat2(c, -s, s, c);
      uv = rotationMatrix * uv;
      return uv;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    int isTexture = USE_LINE;
    // 百分比
    float p = 0.2;

    #if USE_LINE
      // 旋转渐变uv坐标
      vec2 rotatedUV = rotate(uv0, angle);
      o *= mix(color1, color2, rotatedUV.x);
    #endif
    
    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
