// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        width: { value: 0.0, editor: { tooltip: '宽' }}
        height: { value: 0.0, editor: { tooltip: '高' }}
        isOutline: { value: 0.0, editor: { tooltip: '是否外描边', range: [0.0, 1.0, 1.0] }}
        outlineColor: { value: [1.0,1.0,1.0,1.0], editor: { tooltip: '描边颜色', type: color }}
        widthSize: { value: 1.0, editor: { tooltip: '描边大小', range: [0.0, width, 1.0] }}
        heightSize: { value: 1.0, editor: { tooltip: '描边大小', range: [0.0, height, 1.0] }}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform Dissolve {
    vec4 outlineColor;
    float width;
    float height;
    float widthSize;
    float heightSize;
    float lineSize;
    float isOutline;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
        vec2 uv = vec2(uv0);
        // 计算图片的宽高比
        float size = 1.0 - lineSize;
        float distX = widthSize / width;
        float distY = heightSize / height;
        float sizeX = 1.0 - distX;
        float sizeY = 1.0 - distY;

        if ((distX > 0.0 || distY > 0.0) && isOutline > 0.0) {
            // 计算UV坐标相对于中心的偏移量
            vec2 centerOffset = vec2(0.5) - uv;

            // 缩放UV坐标
            uv -= centerOffset * max(distY, distX);
        };

        vec4 o_color = texture(cc_spriteTexture, uv);

        // 左上角
        if (uv0.y <= (1.0 - sizeY) || uv0.y >= sizeY) {
            o_color = mix(texture(cc_spriteTexture, uv), vec4(outlineColor), 1.0);
        };

        // 右下角
        if (uv0.x <= (1.0 - sizeX) || uv0.x >= sizeX) {
            o_color = mix(texture(cc_spriteTexture, uv), vec4(outlineColor), 1.0);
        };
    #endif
    

    #if USE_TEXTURE
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= o_color;
    ALPHA_TEST(o);

    return o;
  }
}%
